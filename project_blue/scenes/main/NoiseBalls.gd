tool
extends Node

export(NodePath) var mesh_path

#spawn parameters
export var size: Vector3 = Vector3.ONE*10
export(float, 1, 4) var res = 1 setget run_res
export var trans: Vector3 = Vector3.ZERO setget run_trans

#noise parameters
export var seeed: int = 42 setget run_seed
export(float, 0.01, 1.5) var zoom = 0.3 setget run_zoom
export var origin: Vector3 = Vector3.ZERO setget run_origin

#circle hiding paramters
export var cull: bool = true setget run_cull
export(float, -1, 1) var thresh = 0 setget run_thresh
export var invert: bool = false setget run_invert

#commands
export var spawn : bool setget run_spawn
export var delete : bool setget run_delete

#global variables
var ball = preload("res://scenes/ball/Ball.tscn")
var noise = OpenSimplexNoise.new()
var res_vec: Vector3 = Vector3.ONE * res
var zoom_vec: Vector3 = Vector3.ONE * zoom
var ball_num: Vector3 = Vector3.ZERO
#var corners: Array

func _ready():
	run_seed(seeed)

#utility functions
func hire_child():
	add_child(ball.instance())

func fire_child():
	var child = get_child(0)
	remove_child(child)
	child.queue_free()

#heavy lifting functions
func move_dots():
	var gap_num: Vector3 = Vector3.ONE / res_vec
	var child_count: int = get_child_count()
	for z in range(0, ball_num.z):
		for y in range(0, ball_num.y):
			for x in range(0, ball_num.x):
				var index = x + y*ball_num.x + z*ball_num.y*ball_num.x
				if index < child_count:
					var cur_child: Sprite3D = get_child(index)
					var pos = Vector3(x,y,z) * gap_num + trans
					cur_child.transform.origin = pos

func get_color():
	var ball_num: Vector3 = (size * res_vec + Vector3.ONE).floor()
	var child_count: int = get_child_count()
	#corners = []
	for z in range(0, ball_num.z):
		#var corner_square: Array = []
		for y in range(0, ball_num.y):
			#var corner_row: Array = []
			for x in range(0, ball_num.x):
				var index = x + y*ball_num.x + z*ball_num.y*ball_num.x
				if index < child_count:
					var cur_child: Sprite3D = get_child(index)
					var val = clamp(noise.get_noise_3dv((Vector3(x,y,z) + origin) / zoom_vec) + thresh, -1, 1) #-1 - 1
					cur_child.modulate = Color.from_hsv((val + 1)/4,1,1)
					if cull:
						if invert:
							cur_child.modulate.a = 1 if (cur_child.modulate.h * 4 - 1) > 0 else 0
						else:
							cur_child.modulate.a = 1 if (cur_child.modulate.h * 4 - 1) < 0 else 0
					#corner_row.append(val)
			#corner_square.append(corner_row)
		#corners.append(corner_square)

#setters
func run_res(r):
	res = r
	res_vec = Vector3.ONE * res

func run_trans(t):
	trans = t
	move_dots()
	get_mesh()

func run_seed(s):
	seeed = s
	noise.seed = s
	get_color()
	get_mesh()

func run_zoom(z):
	zoom = z
	zoom_vec = Vector3.ONE * zoom
	get_color()
	get_mesh()
	
func run_origin(o):
	origin = o
	get_color()
	get_mesh()

func run_cull(c):
	cull = c
	get_color()
	get_mesh()
	
func run_thresh(s):
	thresh = s
	get_color()
	get_mesh()
			
func run_invert(b):
	invert = b
	get_color()
	get_mesh()

#command setters
func run_spawn(k):
	ball_num = (size * res_vec + Vector3.ONE).floor()
	var diff = ball_num.x*ball_num.y*ball_num.z - get_child_count()
	if diff > 0:
		for i in range(0, diff):
			hire_child()
	elif diff < 0:
		for i in range(0, -diff):
			fire_child()
	move_dots()
	get_color()
	get_mesh()

func get_mesh():
	if !mesh_path.is_empty() and get_child_count() != 0:
		var mesh_instance: MeshInstance = get_node(mesh_path)
		var vertices = PoolVector3Array()
		var normals = PoolVector3Array()
		var mesh = ArrayMesh.new()
		var arrays = []
		arrays.resize(ArrayMesh.ARRAY_MAX)
		
		var ball_num: Vector3 = (size * res_vec + Vector3.ONE).floor()
		for z in range(0, ball_num.z-1):
			for y in range(0, ball_num.y-1):
				for x in range(0, ball_num.x-1):
					var corners: Array = [
						get_child(x + y*ball_num.x + z*ball_num.x*ball_num.y)
					, 	get_child((x+1) + y*ball_num.x + z*ball_num.x*ball_num.y)
					,	get_child(x + (y+1)*ball_num.x + z*ball_num.x*ball_num.y)
					,	get_child((x+1) + (y+1)*ball_num.x + z*ball_num.x*ball_num.y)
					,	get_child(x + y*ball_num.x + (z+1)*ball_num.x*ball_num.y)
					,	get_child((x+1) + y*ball_num.x + (z+1)*ball_num.x*ball_num.y)
					,	get_child(x + (y+1)*ball_num.x + (z+1)*ball_num.x*ball_num.y)
					,	get_child((x+1) + (y+1)*ball_num.x + (z+1)*ball_num.x*ball_num.y)
					]
					var corner_pos: Array
					var corner_vals: Array
					for child in corners:
						corner_pos.append(child.transform.origin)
						corner_vals.append(child.modulate.h*4 - 1)
					var case_index = corners_to_index(corner_vals)
					if case_index > 0 and case_index < 255:
						var cell_data = regularCellData[regularCellClass[case_index]]
						var vertex_data = regularVertexData[case_index]
						var local_mesh_data = get_mesh_data(cell_data, vertex_data, corner_pos, corner_vals)
						vertices += local_mesh_data[0]
						normals += local_mesh_data[1]
						
		arrays[ArrayMesh.ARRAY_VERTEX] = vertices
		arrays[ArrayMesh.ARRAY_NORMAL] = normals
		mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
		mesh_instance.mesh = mesh

func get_mesh_data(cell_data: Array, vertex_data: Array, corner_pos: Array, corner_vals: Array) -> Array:
	var vertices = PoolVector3Array() 
	var normals = PoolVector3Array()
	
	var vertex_positions: Array
	for i in range(0, vertex_data.size()):
		var lower_corner: int = get_hex_digit(vertex_data[i], 2)
		var higher_corner: int = get_hex_digit(vertex_data[i], 3)
		var weight: float = interp(0, 1, corner_vals[lower_corner], corner_vals[higher_corner], 0)
		var pos: Vector3 = corner_pos[lower_corner].linear_interpolate(corner_pos[higher_corner], weight)
		vertex_positions.append(pos)
	
	var num_triangles = get_hex_digit(cell_data[0], 1)
	var triangle_indices = cell_data[1]
	for i in range(0, num_triangles):
		var v0 = vertex_positions[triangle_indices[3*i]]
		var v1 = vertex_positions[triangle_indices[3*i + 1]]
		var v2 = vertex_positions[triangle_indices[3*i + 2]]
		var normal = get_normal(v0, v1, v2)
		if !invert:
			vertices.append(v0)
			vertices.append(v2)
			vertices.append(v1) #clockwise winding order of godot
			normals.append(normal)
			normals.append(normal)
			normals.append(normal)
		else:
			vertices.append(v0)
			vertices.append(v1)
			vertices.append(v2) #clockwise winding order of godot
			normals.append(-normal)
			normals.append(-normal)
			normals.append(-normal)
	
	#commit to mesh
	var arrays = []
	arrays.append(vertices)
	arrays.append(normals) 
	return arrays

func run_delete(k):
	while get_child_count() > 0:
		fire_child()
	if !mesh_path.is_empty():
		var mesh_instance: MeshInstance = get_node(mesh_path)
		mesh_instance.mesh = null

#utility functions

#c and d are end points of original range (i.e. corner values [-1, 1])
#a and b are end points of new range (i.e. local-space co-ordinates across relevant axis [0, 1])
#x is the target value of the original range (i.e. 0)
#returns target value of the new range (i.e. coordinate across that edge)
func interp(a: float, b: float, c: float, d: float, x: float) -> float:
	return a + (b-a)*abs(x-c)/abs(d-c)

func get_normal(a: Vector3, b: Vector3, c: Vector3, flip: bool = false) -> Vector3:
	var normal = (b - a).cross(c - a)
	return -normal if flip else normal

func index_to_coords(i: int) -> Array:
	return [i%2, (i/2)%2, i/4]

func get_hex_digit(hex: int, index: int) -> int:
	return int(("%x" % [hex])[index])

func corners_to_index(corners: Array) -> int:
	return(   s(corners[0]) * 1
			+ s(corners[1]) * 2
			+ s(corners[2]) * 4
			+ s(corners[3]) * 8
			+ s(corners[4]) * 16
			+ s(corners[5]) * 32
			+ s(corners[6]) * 64
			+ s(corners[7]) * 128
		  ) 

func s(n: float) -> int:
	return 1 if n < 0 else 0

######################### lookup tables
const regularCellClass: Array = [
	0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
	0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
	0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
	0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
	0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
	0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
	0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
	0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
	0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
	0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
	0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
	0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
	0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
	0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
	0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
	0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00
]

#Each of these elements represents a specific triangle and vertex configuration
#[0xC4, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]
#C = 12 distinct vertices used
#4 = 4 distinct triangles created
#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] = 
#First triangle = vertices 0, 1, 2
#Second triangle = vertices 3, 4, 5
#Third triangle = vertices 6, 7, 8
#Fourth tirangle = vertices 9, 10, 11
const regularCellData: Array = [
	[0x00, []],
	[0x31, [0, 1, 2]],
	[0x62, [0, 1, 2, 3, 4, 5]],
	[0x42, [0, 1, 2, 0, 2, 3]],
	[0x53, [0, 1, 4, 1, 3, 4, 1, 2, 3]],
	[0x73, [0, 1, 2, 0, 2, 3, 4, 5, 6]],
	[0x93, [0, 1, 2, 3, 4, 5, 6, 7, 8]],
	[0x84, [0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7]],
	[0x84, [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7]],
	[0xC4, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]],
	[0x64, [0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3]],
	[0x64, [0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2]],
	[0x64, [0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3]],
	[0x64, [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5]],
	[0x75, [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6]],
	[0x95, [0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8]]
]

#Each of these represents the index-referencable vertices from one of the configurations above
#[0x1146, 0x2245, 0x6201, 0x4223, 0x1326]
#0x1146 = first referencable vertex in configuration
#11 = "vertex re-use data" (unimportant for us)
#01 = "vertex lies on edge between corners 0 (lowest) and 1 (highest)
const regularVertexData: Array = [
	[],
	[0x6201, 0x5102, 0x3304],
	[0x6201, 0x2315, 0x4113],
	[0x5102, 0x3304, 0x2315, 0x4113],
	[0x5102, 0x4223, 0x1326],
	[0x3304, 0x6201, 0x4223, 0x1326],
	[0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326],
	[0x4223, 0x1326, 0x3304, 0x2315, 0x4113],
	[0x4113, 0x8337, 0x4223],
	[0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337],
	[0x6201, 0x2315, 0x8337, 0x4223],
	[0x5102, 0x3304, 0x2315, 0x8337, 0x4223],
	[0x5102, 0x4113, 0x8337, 0x1326],
	[0x4113, 0x8337, 0x1326, 0x3304, 0x6201],
	[0x6201, 0x2315, 0x8337, 0x1326, 0x5102],
	[0x3304, 0x2315, 0x8337, 0x1326],
	[0x3304, 0x1146, 0x2245],
	[0x6201, 0x5102, 0x1146, 0x2245],
	[0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245],
	[0x2315, 0x4113, 0x5102, 0x1146, 0x2245],
	[0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245],
	[0x1146, 0x2245, 0x6201, 0x4223, 0x1326],
	[0x3304, 0x1146, 0x2245, 0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326],
	[0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x4113],
	[0x4223, 0x4113, 0x8337, 0x3304, 0x1146, 0x2245],
	[0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8337],
	[0x4223, 0x6201, 0x2315, 0x8337, 0x3304, 0x1146, 0x2245],
	[0x4223, 0x8337, 0x2315, 0x2245, 0x1146, 0x5102],
	[0x5102, 0x4113, 0x8337, 0x1326, 0x3304, 0x1146, 0x2245],
	[0x4113, 0x8337, 0x1326, 0x1146, 0x2245, 0x6201],
	[0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x3304, 0x1146, 0x2245],
	[0x2245, 0x2315, 0x8337, 0x1326, 0x1146],
	[0x2315, 0x2245, 0x8157],
	[0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157],
	[0x4113, 0x6201, 0x2245, 0x8157],
	[0x2245, 0x8157, 0x4113, 0x5102, 0x3304],
	[0x5102, 0x4223, 0x1326, 0x2315, 0x2245, 0x8157],
	[0x6201, 0x4223, 0x1326, 0x3304, 0x2315, 0x2245, 0x8157],
	[0x6201, 0x2245, 0x8157, 0x4113, 0x5102, 0x4223, 0x1326],
	[0x4223, 0x1326, 0x3304, 0x2245, 0x8157, 0x4113],
	[0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157],
	[0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157],
	[0x8337, 0x4223, 0x6201, 0x2245, 0x8157],
	[0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x4223],
	[0x5102, 0x4113, 0x8337, 0x1326, 0x2315, 0x2245, 0x8157],
	[0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x2315, 0x2245, 0x8157],
	[0x5102, 0x1326, 0x8337, 0x8157, 0x2245, 0x6201],
	[0x8157, 0x8337, 0x1326, 0x3304, 0x2245],
	[0x2315, 0x3304, 0x1146, 0x8157],
	[0x6201, 0x5102, 0x1146, 0x8157, 0x2315],
	[0x3304, 0x1146, 0x8157, 0x4113, 0x6201],
	[0x4113, 0x5102, 0x1146, 0x8157],
	[0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4223, 0x1326],
	[0x1326, 0x4223, 0x6201, 0x2315, 0x8157, 0x1146],
	[0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x5102, 0x4223, 0x1326],
	[0x1326, 0x1146, 0x8157, 0x4113, 0x4223],
	[0x2315, 0x3304, 0x1146, 0x8157, 0x4223, 0x4113, 0x8337],
	[0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x4223, 0x4113, 0x8337],
	[0x3304, 0x1146, 0x8157, 0x8337, 0x4223, 0x6201],
	[0x4223, 0x5102, 0x1146, 0x8157, 0x8337],
	[0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4113, 0x8337, 0x1326],
	[0x6201, 0x4113, 0x8337, 0x1326, 0x1146, 0x8157, 0x2315],
	[0x6201, 0x3304, 0x1146, 0x8157, 0x8337, 0x1326, 0x5102],
	[0x1326, 0x1146, 0x8157, 0x8337],
	[0x1326, 0x8267, 0x1146],
	[0x6201, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146],
	[0x6201, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146],
	[0x5102, 0x3304, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146],
	[0x5102, 0x4223, 0x8267, 0x1146],
	[0x3304, 0x6201, 0x4223, 0x8267, 0x1146],
	[0x5102, 0x4223, 0x8267, 0x1146, 0x6201, 0x2315, 0x4113],
	[0x1146, 0x8267, 0x4223, 0x4113, 0x2315, 0x3304],
	[0x4113, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146],
	[0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x1326, 0x8267, 0x1146],
	[0x6201, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146],
	[0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146],
	[0x8267, 0x1146, 0x5102, 0x4113, 0x8337],
	[0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304],
	[0x6201, 0x2315, 0x8337, 0x8267, 0x1146, 0x5102],
	[0x1146, 0x3304, 0x2315, 0x8337, 0x8267],
	[0x3304, 0x1326, 0x8267, 0x2245],
	[0x1326, 0x8267, 0x2245, 0x6201, 0x5102],
	[0x3304, 0x1326, 0x8267, 0x2245, 0x6201, 0x2315, 0x4113],
	[0x1326, 0x8267, 0x2245, 0x2315, 0x4113, 0x5102],
	[0x5102, 0x4223, 0x8267, 0x2245, 0x3304],
	[0x6201, 0x4223, 0x8267, 0x2245],
	[0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x6201, 0x2315, 0x4113],
	[0x4113, 0x4223, 0x8267, 0x2245, 0x2315],
	[0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x4113, 0x8337],
	[0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x4223, 0x4113, 0x8337],
	[0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x6201, 0x2315, 0x8337],
	[0x5102, 0x1326, 0x8267, 0x2245, 0x2315, 0x8337, 0x4223],
	[0x3304, 0x2245, 0x8267, 0x8337, 0x4113, 0x5102],
	[0x8337, 0x8267, 0x2245, 0x6201, 0x4113],
	[0x5102, 0x6201, 0x2315, 0x8337, 0x8267, 0x2245, 0x3304],
	[0x2315, 0x8337, 0x8267, 0x2245],
	[0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146],
	[0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146],
	[0x6201, 0x2245, 0x8157, 0x4113, 0x1326, 0x8267, 0x1146],
	[0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146],
	[0x4223, 0x8267, 0x1146, 0x5102, 0x2315, 0x2245, 0x8157],
	[0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x2315, 0x2245, 0x8157],
	[0x4223, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x4113],
	[0x3304, 0x2245, 0x8157, 0x4113, 0x4223, 0x8267, 0x1146],
	[0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146],
	[0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146],
	[0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146],
	[0x4223, 0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x1326, 0x8267, 0x1146],
	[0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157],
	[0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x2315, 0x2245, 0x8157],
	[0x8337, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157],
	[0x3304, 0x2245, 0x8157, 0x8337, 0x8267, 0x1146],
	[0x8157, 0x2315, 0x3304, 0x1326, 0x8267],
	[0x8267, 0x8157, 0x2315, 0x6201, 0x5102, 0x1326],
	[0x8267, 0x1326, 0x3304, 0x6201, 0x4113, 0x8157],
	[0x8267, 0x8157, 0x4113, 0x5102, 0x1326],
	[0x5102, 0x4223, 0x8267, 0x8157, 0x2315, 0x3304],
	[0x2315, 0x6201, 0x4223, 0x8267, 0x8157],
	[0x3304, 0x5102, 0x4223, 0x8267, 0x8157, 0x4113, 0x6201],
	[0x4113, 0x4223, 0x8267, 0x8157],
	[0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337],
	[0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337],
	[0x8157, 0x8337, 0x4223, 0x6201, 0x3304, 0x1326, 0x8267],
	[0x5102, 0x1326, 0x8267, 0x8157, 0x8337, 0x4223],
	[0x8267, 0x8157, 0x2315, 0x3304, 0x5102, 0x4113, 0x8337],
	[0x6201, 0x4113, 0x8337, 0x8267, 0x8157, 0x2315],
	[0x6201, 0x3304, 0x5102, 0x8337, 0x8267, 0x8157],
	[0x8337, 0x8267, 0x8157],
	[0x8337, 0x8157, 0x8267],
	[0x6201, 0x5102, 0x3304, 0x8337, 0x8157, 0x8267],
	[0x6201, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267],
	[0x5102, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267],
	[0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267],
	[0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x8157, 0x8267],
	[0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267],
	[0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267],
	[0x4113, 0x8157, 0x8267, 0x4223],
	[0x4223, 0x4113, 0x8157, 0x8267, 0x6201, 0x5102, 0x3304],
	[0x8157, 0x8267, 0x4223, 0x6201, 0x2315],
	[0x3304, 0x2315, 0x8157, 0x8267, 0x4223, 0x5102],
	[0x1326, 0x5102, 0x4113, 0x8157, 0x8267],
	[0x8157, 0x4113, 0x6201, 0x3304, 0x1326, 0x8267],
	[0x1326, 0x5102, 0x6201, 0x2315, 0x8157, 0x8267],
	[0x8267, 0x1326, 0x3304, 0x2315, 0x8157],
	[0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267],
	[0x6201, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267],
	[0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267],
	[0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267],
	[0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267],
	[0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267],
	[0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267],
	[0x4113, 0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x8337, 0x8157, 0x8267],
	[0x4223, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245],
	[0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8157, 0x8267],
	[0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x3304, 0x1146, 0x2245],
	[0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x1146, 0x2245],
	[0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245],
	[0x1326, 0x1146, 0x2245, 0x6201, 0x4113, 0x8157, 0x8267],
	[0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x1326, 0x3304, 0x1146, 0x2245],
	[0x1326, 0x1146, 0x2245, 0x2315, 0x8157, 0x8267],
	[0x2315, 0x2245, 0x8267, 0x8337],
	[0x2315, 0x2245, 0x8267, 0x8337, 0x6201, 0x5102, 0x3304],
	[0x4113, 0x6201, 0x2245, 0x8267, 0x8337],
	[0x5102, 0x4113, 0x8337, 0x8267, 0x2245, 0x3304],
	[0x2315, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326],
	[0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x2315, 0x2245, 0x8267],
	[0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326],
	[0x4113, 0x4223, 0x1326, 0x3304, 0x2245, 0x8267, 0x8337],
	[0x2315, 0x2245, 0x8267, 0x4223, 0x4113],
	[0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x6201, 0x5102, 0x3304],
	[0x6201, 0x2245, 0x8267, 0x4223],
	[0x3304, 0x2245, 0x8267, 0x4223, 0x5102],
	[0x5102, 0x4113, 0x2315, 0x2245, 0x8267, 0x1326],
	[0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x3304, 0x6201],
	[0x5102, 0x6201, 0x2245, 0x8267, 0x1326],
	[0x3304, 0x2245, 0x8267, 0x1326],
	[0x8267, 0x8337, 0x2315, 0x3304, 0x1146],
	[0x5102, 0x1146, 0x8267, 0x8337, 0x2315, 0x6201],
	[0x3304, 0x1146, 0x8267, 0x8337, 0x4113, 0x6201],
	[0x8337, 0x4113, 0x5102, 0x1146, 0x8267],
	[0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326],
	[0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x4223, 0x1326],
	[0x8267, 0x8337, 0x4113, 0x6201, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326],
	[0x4113, 0x4223, 0x1326, 0x1146, 0x8267, 0x8337],
	[0x3304, 0x2315, 0x4113, 0x4223, 0x8267, 0x1146],
	[0x2315, 0x6201, 0x5102, 0x1146, 0x8267, 0x4223, 0x4113],
	[0x1146, 0x8267, 0x4223, 0x6201, 0x3304],
	[0x5102, 0x1146, 0x8267, 0x4223],
	[0x8267, 0x1326, 0x5102, 0x4113, 0x2315, 0x3304, 0x1146],
	[0x6201, 0x4113, 0x2315, 0x1326, 0x1146, 0x8267],
	[0x6201, 0x3304, 0x1146, 0x8267, 0x1326, 0x5102],
	[0x1326, 0x1146, 0x8267],
	[0x1326, 0x8337, 0x8157, 0x1146],
	[0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304],
	[0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x2315, 0x4113],
	[0x4113, 0x5102, 0x3304, 0x2315, 0x1326, 0x8337, 0x8157, 0x1146],
	[0x8337, 0x8157, 0x1146, 0x5102, 0x4223],
	[0x6201, 0x4223, 0x8337, 0x8157, 0x1146, 0x3304],
	[0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x6201, 0x2315, 0x4113],
	[0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x2315, 0x4113],
	[0x4223, 0x4113, 0x8157, 0x1146, 0x1326],
	[0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304],
	[0x1146, 0x8157, 0x2315, 0x6201, 0x4223, 0x1326],
	[0x4223, 0x5102, 0x3304, 0x2315, 0x8157, 0x1146, 0x1326],
	[0x4113, 0x8157, 0x1146, 0x5102],
	[0x6201, 0x4113, 0x8157, 0x1146, 0x3304],
	[0x2315, 0x8157, 0x1146, 0x5102, 0x6201],
	[0x2315, 0x8157, 0x1146, 0x3304],
	[0x2245, 0x3304, 0x1326, 0x8337, 0x8157],
	[0x6201, 0x2245, 0x8157, 0x8337, 0x1326, 0x5102],
	[0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x6201, 0x2315, 0x4113],
	[0x2245, 0x2315, 0x4113, 0x5102, 0x1326, 0x8337, 0x8157],
	[0x4223, 0x8337, 0x8157, 0x2245, 0x3304, 0x5102],
	[0x8157, 0x2245, 0x6201, 0x4223, 0x8337],
	[0x2245, 0x3304, 0x5102, 0x4223, 0x8337, 0x8157, 0x4113, 0x6201, 0x2315],
	[0x4223, 0x8337, 0x8157, 0x2245, 0x2315, 0x4113],
	[0x4113, 0x8157, 0x2245, 0x3304, 0x1326, 0x4223],
	[0x1326, 0x4223, 0x4113, 0x8157, 0x2245, 0x6201, 0x5102],
	[0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x6201, 0x2315],
	[0x5102, 0x1326, 0x4223, 0x2315, 0x8157, 0x2245],
	[0x3304, 0x5102, 0x4113, 0x8157, 0x2245],
	[0x4113, 0x8157, 0x2245, 0x6201],
	[0x5102, 0x6201, 0x2315, 0x8157, 0x2245, 0x3304],
	[0x2315, 0x8157, 0x2245],
	[0x1146, 0x1326, 0x8337, 0x2315, 0x2245],
	[0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304],
	[0x6201, 0x2245, 0x1146, 0x1326, 0x8337, 0x4113],
	[0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x5102, 0x3304],
	[0x5102, 0x1146, 0x2245, 0x2315, 0x8337, 0x4223],
	[0x1146, 0x3304, 0x6201, 0x4223, 0x8337, 0x2315, 0x2245],
	[0x8337, 0x4113, 0x6201, 0x2245, 0x1146, 0x5102, 0x4223],
	[0x4223, 0x8337, 0x4113, 0x3304, 0x2245, 0x1146],
	[0x4113, 0x2315, 0x2245, 0x1146, 0x1326, 0x4223],
	[0x1146, 0x1326, 0x4223, 0x4113, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304],
	[0x1326, 0x4223, 0x6201, 0x2245, 0x1146],
	[0x4223, 0x5102, 0x3304, 0x2245, 0x1146, 0x1326],
	[0x2245, 0x1146, 0x5102, 0x4113, 0x2315],
	[0x4113, 0x2315, 0x2245, 0x1146, 0x3304, 0x6201],
	[0x6201, 0x2245, 0x1146, 0x5102],
	[0x3304, 0x2245, 0x1146],
	[0x3304, 0x1326, 0x8337, 0x2315],
	[0x5102, 0x1326, 0x8337, 0x2315, 0x6201],
	[0x6201, 0x3304, 0x1326, 0x8337, 0x4113],
	[0x5102, 0x1326, 0x8337, 0x4113],
	[0x4223, 0x8337, 0x2315, 0x3304, 0x5102],
	[0x6201, 0x4223, 0x8337, 0x2315],
	[0x3304, 0x5102, 0x4223, 0x8337, 0x4113, 0x6201],
	[0x4113, 0x4223, 0x8337],
	[0x4113, 0x2315, 0x3304, 0x1326, 0x4223],
	[0x1326, 0x4223, 0x4113, 0x2315, 0x6201, 0x5102],
	[0x3304, 0x1326, 0x4223, 0x6201],
	[0x5102, 0x1326, 0x4223],
	[0x5102, 0x4113, 0x2315, 0x3304],
	[0x6201, 0x4113, 0x2315],
	[0x6201, 0x3304, 0x5102],
	[]
]
