[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://assets/textures/Rock028_2K-PNG/Rock028_2K_Color.png" type="Texture" id=1]
[ext_resource path="res://assets/textures/Moss002_2K-PNG/Moss002_2K_Color.png" type="Texture" id=2]
[ext_resource path="res://assets/textures/Ground033_2K-PNG/Ground033_2K_Color.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

//general settings
uniform float specular : hint_range(0, 1) = 0.5;
uniform float metallic : hint_range(0, 1) = 0.0;
uniform float roughness : hint_range(0, 1) = 1.0;

//triplanar settings
uniform float uv1_blend_sharpness = 2.0;
uniform float sand_height = 2.0;
uniform vec4 albedo : hint_color;
uniform vec3 uv1_scale = vec3(1.0, 1.0, 1.0);
uniform vec3 uv1_offset = vec3(0.0, 0.0, 0.0);

//textures and texture-specific settings (ideally we want albedo, scale, offset per texture)
uniform sampler2D texture_grass : hint_albedo;
uniform sampler2D texture_rock : hint_albedo;
uniform sampler2D texture_sand : hint_albedo;

//variables
varying vec3 uv1_triplanar_pos;
varying vec3 uv1_power_normal;
varying float height;

void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0, -1.0, 0.0) * abs(NORMAL.x);
	BINORMAL += vec3(0.0, 0.0, 1.0) * abs(NORMAL.y);
	BINORMAL += vec3(0.0, -1.0, 0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal = pow(abs(NORMAL), vec3(uv1_blend_sharpness));
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	height = VERTEX.y;
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(vec3 p_weights, vec3 p_triplanar_pos, float height_p) {
	vec4 samp = vec4(0.0);
	samp += texture(texture_rock, p_triplanar_pos.xy) * p_weights.z;
	if (height_p > sand_height){
		samp += texture(texture_grass, p_triplanar_pos.xz) * p_weights.y;
	}
	else{
		samp += texture(texture_sand,p_triplanar_pos.xz) * p_weights.y;
	}
	samp += texture(texture_rock, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(uv1_power_normal, uv1_triplanar_pos, height);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	SPECULAR = specular;
	METALLIC = metallic;
	ROUGHNESS = roughness;
}
"

[resource]
shader = SubResource( 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/uv1_blend_sharpness = 3.0
shader_param/sand_height = 2.247
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/uv1_scale = Vector3( 0.05, 0.05, 0.05 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/texture_grass = ExtResource( 2 )
shader_param/texture_rock = ExtResource( 1 )
shader_param/texture_sand = ExtResource( 3 )
